import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Input
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error

# Generating some synthetic data
np.random.seed(42)
X = np.random.rand(1000, 5)
y = 3 * X[:, 0] + 2 * X[:, 1] - 5 * X[:, 2] + np.random.randn(1000)

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
# Define the model using the Input layer
model = Sequential()
# Adding the input layer

model.add(Input(shape=(X_train.shape[1],)))
# Add hidden layers
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
# Adding the output layer
model.add(Dense(units=1)) # No activation function for regression
# Compiling the model
model.compile(optimizer='adam', loss='mse' )
history = model.fit(X_train, y_train, epochs=2, batch_size=32, validation_split=0.2,
verbose=1)
y_pred = model.predict(X_test)
# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error on Test Set: {mse}")
import matplotlib.pyplot as plt
# Plot the training and validation loss
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()